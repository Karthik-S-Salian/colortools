---
import Layout from "../../../layouts/Layout.astro";
import palettes from "../../../data/color-palettes.json";

function compute_text_color(color: string): string {
    if (color.length < 7) return "white";

    const luminance =
        (0.299 * parseInt(color.substring(1, 3), 16) +
            0.587 * parseInt(color.substring(3, 5), 16) +
            0.114 * parseInt(color.substring(5, 7), 16)) /
        255;

    if (luminance > 0.5) return "black";
    return "white";
}
---

<Layout>
    <main>
        <main>
            <h2>CSS PALETTES</h2>
            <div class="palettes-container">
                {
                    palettes.map((palette) => (
                        <div class="palette">
                            {palette.map((color) => {
                                return (
                                    <span
                                        style={`background-color:${color};color:${compute_text_color(
                                            color,
                                        )}`}
                                        class="palette-color"
                                    >
                                        <span>{color}</span>
                                    </span>
                                );
                            })}
                        </div>
                    ))
                }
            </div>
        </main>
    </main>
</Layout>

<style>
    .palettes-container {
        width: 100%;
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .palette {
        display: flex;
        flex-direction: row;
        height: 5rem;
        width: 289px;
    }

    .palette-color {
        flex-grow: 1;
        display: grid;
        place-items: center;
        cursor: pointer;
    }

    .palette-color > span {
        display: none;
        width:0;
        transition: all 500ms ease-in-out;
    }

    .palette-color:hover > span {
        display: inline;
        width:fit-content;
    }

    .palette-color:first-child {
        border-radius: 5px 0px 0px 5px;
    }

    .palette-color:last-child {
        border-radius: 0px 5px 5px 0px;
    }
</style>

<script>
    // const colorPalettesContainer = document.getElementById("color-palettes-container");
    // const loadMoreButton = document.getElementById("load-more-button");

    // let offset = 191;

    // const limit = 10;
    // let isRemaining = true;

    // function getContrastRatio(hexColor) {
    //     const rgb = hexToRgb(hexColor);
    //     const { r, g, b } = rgb;

    //     const brightness = (r * 299 + g * 587 + b * 114) / 1000;
    //     return brightness >= 128 ? 'text-black' : 'text-white';
    // }

    // function hexToRgb(hexColor) {
    //     const hex = hexColor.replace('#', '');
    //     const bigint = parseInt(hex, 16);
    //     const r = (bigint >> 16) & 255;
    //     const g = (bigint >> 8) & 255;
    //     const b = bigint & 255;
    //     return { r, g, b };
    // }

    // function addPalette(pallatte){
    //     const newDiv = document.createElement("div");
    //     newDiv.classList.add("flex", "flex-row", "h-20","font-medium");

    //     for (const color of pallatte){
    //         newDiv.innerHTML += `
    //                         <span
    //                         style="background-color:${color}"
    //                         class="flex-grow group grid place-items-center cursor-pointer ${getContrastRatio(color)}"
    //                         onclick="() => copyToClipboard(color)">
    //                             <span class='hidden group-hover:inline'>${color}</span>
    //                         </span>
    //                         `
    //     }
    //     colorPalettesContainer.appendChild(newDiv)
    // }

    // async function fetchMore(){
    //     if(!isRemaining)
    //         return
    //     const response = await fetch(`http://127.0.0.1:8000/css3/api/color-palettes?offset=${offset}&limit=${limit}`)
    //     const data = await response.json()
    //     console.log(data,data.palettes && data.palettes.length)
    //     if(data){
    //         if(!data.isRemaining){
    //             isRemaining=false
    //             loadMoreButton.classList.add("hidden")
    //         }
    //         if(data.palettes && data.palettes.length){
    //             for(const palette of data.palettes)
    //                 addPalette(palette)
    //             offset += data.palettes.length
    //         }
    //     }
    // }

    // fetchMore()
</script>
